// import java.time.Duration
// import java.time.LocalDateTime
// import java.time.ZonedDateTime


val logName = "Time Of Day"
var Timer tod_Timer = null

rule "Calculate time of day state" 
when
  System started or // run at system start in case the time changed when OH was offline
  Channel "astro:sun:local:rise#event" triggered START or
  Channel "astro:sun:local:set#event" triggered START or
  Channel "astro:sun:local:minus90:set#event" triggered START or
  Time cron "0 5 0 * * ? *" or // 5 minute after midnight so give Astro time to calculate the new day's times
  Time cron "0 1 7 * * ? *" or // triggers at 07:01AM 
  Time cron "0 21 7 * * ? *" or  // triggers at 07:21PM
  Time cron "0 1 17 * * ? *" or // triggers at 17:01PM 
  Time cron "0 31 17 * * ? *" or  // triggers at 17:31PM
  Time cron "0 11 19 * * ? *" or // triggers at 19:11PM 
  Time cron "0 46 20 * * ? *" or  // triggers at 20:46PM
  Time cron "0 55 23 * * ? *" or  // triggers at 23:55PM
  Item vTod_Trigger received command ON
then

  logInfo("tod_calc_tod_state.rule", "Calculating time of day based on:" + now)

  // Calculate the times for the static tods and populate the associated Items
  // Update when changing static times
  // Jump to tomorrow and subtract to avoid problems at the change over to/from DST
  /////////////////////////////////////////////////////////////////////////////////
//val stTime_Wakeup  	= now.withTimeAtStartOfDay.plusHours(7)                  //"07:00" -> used before OH3
val stTime_Wakeup   = now.withHour(7).withMinute(0)   //"07:00"
val stTime_Morning  = now.withHour(7).withMinute(20)  //"07:20"
val stTime_Cooking  = now.withHour(17).withMinute(0)  //"17:00"
val stTime_Dinner  	= now.withHour(17).withMinute(30)  //"17:30"
val stTime_Evening  = now.withHour(19).withMinute(10)  //"19:10"
val stTime_Night  	= now.withHour(20).withMinute(45)  //"20:45"
val stTime_Bed   	  = now.withHour(23).withMinute(54) //"23:54"

// Convert the Astro Items from DateTimeType to Java Time (ZonedDateTime)
val stStart_Day = (vSunrise_Time.state as DateTimeType).getZonedDateTime()
val stStart_Evening = (vSunset_Time.state as DateTimeType).getZonedDateTime()
val stStart_Afternoon = (vSunset_Time.state as DateTimeType).getZonedDateTime().minusHours(1).minusMinutes(30)

logInfo("tod_calc_tod_state.rule", "Start Day date: " + stStart_Day)
logInfo("tod_calc_tod_state.rule", "Start Evening date: " + stStart_Evening)
logInfo("tod_calc_tod_state.rule", "Start Afternoon date: " + stStart_Afternoon)

vWakeup_Time.postUpdate (stTime_Wakeup.toLocalDateTime().toString())
vMorning_Time.postUpdate (stTime_Morning.toLocalDateTime().toString())
vCooking_Time.postUpdate  (stTime_Cooking.toLocalDateTime().toString())
vDinner_Time.postUpdate  (stTime_Dinner.toLocalDateTime().toString())
vNight_Time.postUpdate   (stTime_Night.toLocalDateTime().toString())
vEvening_Time.postUpdate (stTime_Evening.toLocalDateTime().toString())
vBed_Time.postUpdate     (stTime_Bed.toLocalDateTime().toString())

logInfo("tod_calc_tod_state.rule", "Test Date Compare0: " + vSunrise_Time.toString())
logInfo("tod_calc_tod_state.rule", "Test Date Compare1: " + (vSunrise_Time.state as DateTimeType).getZonedDateTime())

//(MyDateTimeItem.state as DateTimeType).getZonedDateTime()
  // Calculate the current time of day
  var curr = "UNKNOWN"
  switch now {
  	case now.isAfter(stTime_Wakeup) && now.isBefore(stTime_Morning): {
      if (now.isAfter(stStart_Day)) { 
        curr = "WAKEUP_DAY" 
      } else { 
        curr = "WAKEUP" 
      }
    }
    case now.isAfter(stTime_Morning) && now.isBefore(stStart_Afternoon): {
      if (now.isAfter(stStart_Day)) { 
        curr = "DAY" 
      } else { 
        curr = "MORNING" 
      }
    }
    case now.isAfter(stTime_Cooking) && now.isBefore(stTime_Dinner): {
      if (now.isBefore(stStart_Afternoon)) {
         curr = "COOKING_DAY"
      } else {
         curr = "COOKING"
      }      
    }
    case now.isAfter(stTime_Dinner) && now.isBefore(stTime_Evening): {
      if (now.isBefore(stStart_Afternoon)) {
         curr = "DINNER_DAY" 
      } else {
         curr = "DINNER" 
      }      
    }
    case now.isAfter(stTime_Evening) && now.isBefore(stTime_Night): {
      if (now.isBefore(stStart_Afternoon)) {
         curr = "EVENING_DAY"
      } else {
         curr = "EVENING" 
      }     
    }
    case now.isAfter(stTime_Night) && now.isBefore(stTime_Bed): {
      if (now.isBefore(stStart_Afternoon)) { 
        curr = "NIGHT_DAY"
      } else {
        curr = "NIGHT" 
      }     
    }
    case now.isAfter(stTime_Bed) && now.isBefore(stTime_Bed.plusDays(1)): curr = "BED"
  	case now.isAfter(stTime_Bed.minusDays(1)) && now.isBefore(stTime_Wakeup): curr = "BED"  
    default : curr = "UNSET"
  }
 
  // Publish the current state
  logInfo("tod_calc_tod_state.rule", "Calculated time of day is: " + curr)
  vTimeOfDay.sendCommand(curr)
end


